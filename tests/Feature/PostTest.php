<?php

namespace Tests\Feature;

use App\Models\Post;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Testing\File;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class PostTest extends TestCase
{
    use RefreshDatabase;

   protected function setUp(): void
   {
       parent::setUp(); // TODO: Change the autogenerated stub
       Storage::fake('local');
   }

    /** @test */
    public function a_post_can_be_stored(): void
    {
        $this->withoutExceptionHandling();

        $file = File::create('myimage.jpg');

        $data = [
            'title' => 'Post Title',
            'description' => 'Post Description',
            'image' => $file
        ];

        $response = $this->post('/posts', $data);
        $response->assertOk();

        $this->assertDatabaseCount('posts', 1);

        $post = Post::first();

        $this->assertEquals($data['title'], $post->title);
        $this->assertEquals($data['description'], $post->description);
        $this->assertEquals('images/'.$file->hashName(), $post->image);

        Storage::disk('local')->assertExists($post->image);
    }

    /** @test */
    public function attribute_title_required_validation()
    {
        $data = [
            'title' => '',
            'description' => 'Post Description',
            'image' => ''
        ];

        $response = $this->post('/posts', $data);
        $response->assertRedirect();
        $response->assertInvalid('title');
    }

    /** @test */
    public function attribute_image_file_validation()
    {
        $file = File::create('myimage.jpg');
        $data = [
            'title' => 'Title',
            'description' => 'Post Description',
            'image' => 'invalidparam'
        ];

        $response = $this->post('/posts', $data);
        $response->assertRedirect();
        $response->assertInvalid('image');
    }

    /** @test */
    public function post_can_be_updated()
    {
        $file = File::create('myimage.jpg');
        $this->withoutExceptionHandling();
        $post = Post::factory()->create();
        $data = [
            'title' => 'Title Updated',
            'description' => 'Post Updated',
            'image' =>  $file
        ];

        $response = $this->patch('/posts/' . $post->id, $data);
        $response->assertOk();

        $updatedPost = Post::first();

        $this->assertEquals($data['title'], $updatedPost->title);
        $this->assertEquals($data['description'], $updatedPost->description);
        $this->assertEquals('images/'.$file->hashName(), $updatedPost->image);
        $this->assertEquals($post->id, $updatedPost->id);
    }

    /** @test */
    public function ()
    {

    }
}
